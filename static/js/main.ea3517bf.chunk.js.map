{"version":3,"sources":["Header/Header.jsx","Book/Book.jsx","api/api.js","api/books.js","BooksTable/BooksTable.jsx","Dashboard/Dashboard.jsx","api/category.js","ErrorsPlace/ErrorsPlace.jsx","AddBook/AddBook.jsx","EditBook/EditBook.jsx","App.jsx","index.jsx"],"names":["Header","className","to","exact","Book","book","onBookDeleted","title","author","category","isbn","pathname","state","isEditing","type","onClick","id","BASE_URL","request","url","options","fetch","then","res","json","console","log","getBookDelete","bookId","method","addBook","headers","body","JSON","stringify","post","updateCurrentBook","put","BooksTable","useState","books","setBooks","useEffect","removeBook","carrentList","filter","map","Dashboard","getCategories","ErrorsPlace","errors","emptyTitle","emptyAuthor","numberInAuthor","noCategory","emptyISBN","lettersInISBN","lengthISBN","AddBook","categoties","setCategories","errorVisible","setErrorVisible","ISBN","newBook","setNewBook","history","useHistory","data","selectedCategoryId","categoryId","getCategory","name","useMemo","newErrors","match","length","handleChange","event","preventDefault","target","value","current","countError","count","key","addNewBook","redirect","replace","onSubmit","placeholder","onChange","hidden","selected","EditBook","useLocation","editedBook","setEditedBook","saveBook","updateBook","updatedBook","App","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea3517bf.chunk.js","sourcesContent":["import React from 'react';\n\n// import 'bulma';\nimport { NavLink } from 'react-router-dom';\n\nexport const Header = () => (\n  <nav className=\"navbar\">\n    <NavLink\n      to=\"/\"\n      exact\n      className=\"navbar-item is-tab\"\n    >\n      Dashboard\n    </NavLink>\n    <NavLink to=\"/addbook\" className=\"navbar-item is-tab\">\n      Add a Book\n    </NavLink>\n  </nav>\n);\n","import PropTypes from 'prop-types';\nimport {  Link } from 'react-router-dom';\n\nimport 'bulma';\nimport './Book.scss';\n\nexport const Book = ({ book, onBookDeleted }) => {\n  \n\n  return <tr className=\"Book\" key={book.id}>\n    <td>{book.title}</td>\n    <td>{book.author}</td>\n    <td>{book.category}</td>\n    <td>{book.isbn}</td>\n    <td>\n      <Link \n        className=\"Book__button button button--edit\"\n        to={{\n          pathname: \"/editbook\",\n          state: {\n            book,\n            isEditing: true,\n          },\n        }}\n      > \n        EDIT\n      </Link>\n      <button\n        type=\"button\"\n        className=\"Book__button button button--delete\"\n        onClick ={() => {\n          onBookDeleted(book.id)\n        }}\n      >\n        DELETE\n      </button>\n    </td>\n  </tr>\n\n}\n\n          \n  \n\nBook.propTypes = {\n  book: PropTypes.arrayOf().isRequired,\n};\n"," const BASE_URL = 'https://books-data-base.herokuapp.com';\n\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then(res => res.json());\n\n  console.log(fetch(`${BASE_URL}/books`)\n)\n\nexport const remove = url => request(url, { method: 'DELETE' });\n\nexport const post = (url, book) => request(url, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(book),\n});\n\nexport const put = (url, {title, author, category, isbn}) => request(url, {\n  method: 'PUT',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify({title, author, category, isbn}),\n});\n","import { request, remove, post, put } from './api';\n\nexport const getBooks = () => request(`/books`);\n\nexport const getBookDelete = bookId => remove(`/books/${bookId}`);\n\nexport function addBook(book) {\n  return post(`/books`, book);\n}\n\nexport const updateCurrentBook= ({ id, title, author, category, isbn }) => put(`/books/${id}`, {title, author, category, isbn})\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Book } from '../Book';\n\nimport { getBooks, getBookDelete } from '../api/books';\n\nimport 'bulma';\n\nimport './BooksTable.scss';\n\nexport const BooksTable = () => {\n  const [books, setBooks] = useState([]);\n\n  useEffect(() => {\n    getBooks()\n      .then(res => setBooks(res));\n  }, [books]);\n\n  const removeBook = (bookId) => {\n    getBookDelete(bookId)\n    .then(() => {\n      setBooks(carrentList => (\n        carrentList.filter(books => books.id !== bookId)\n      ))\n    })\n  }\n\n  return (\n    <>\n        <table className=\"BooksTable table  is-striped is-narrow is-hoverable\">\n        <thead>\n          <th className=\"BooksTable__title\">Title</th>\n          <th className=\"BooksTable__title\">Author</th>\n          <th className=\"BooksTable__title\">Category</th>\n          <th className=\"BooksTable__title\">ISBN</th>\n          <th className=\"BooksTable__title\">Action</th>\n        </thead>\n        <tbody>\n          {books.map(book => <Book book={book} books={books} onBookDeleted={removeBook}  /> )}\n        </tbody>\n      </table>\n    </>\n    \n  );\n};\n\nBooksTable.propTypes = {\n  people: PropTypes.arrayOf().isRequired,\n};\n","import React from 'react';\n\nimport { BooksTable } from '../BooksTable'\n\nexport const Dashboard = () =>\n  <>\n    <h1 className=\"title\">Books List</h1>\n    <BooksTable />\n  </>\n\n\n","import { request } from './api';\n\nexport const getCategories = () => request(`/categories`);\n\nexport const getCategory = (categoryId) => request(`/categories/${categoryId}`);\n","import React from 'react';\n\nimport 'bulma';\nimport './ErrorsPlace.scss';\n\nexport const ErrorsPlace = ({ errors }) => {\n\n  return (\n    <div className=\"ErrorsPlace\">\n      <p>\n        {errors.emptyTitle}\n      </p>\n      <p>\n        {errors.emptyAuthor}\n      </p>\n      <p>\n        {errors.numberInAuthor}\n      </p>\n      <p>\n        {errors.noCategory}\n      </p>\n      <p>\n        {errors.emptyISBN}\n      </p>\n      <p>\n        {errors.lettersInISBN}\n      </p>\n      <p>\n        {errors.lengthISBN}\n      </p>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport 'bulma';\nimport './AddBook.scss';\n\nimport { getCategories, getCategory } from '../api/category'\nimport { addBook } from '../api/books'\nimport { ErrorsPlace } from '../ErrorsPlace'\n\nexport const AddBook = () => {\n\n  const [categoties, setCategories] = useState([]);\n  const [errorVisible, setErrorVisible] = useState(false)\n  const [newBook, setNewBook] = useState({\n    title: '',\n    author: '',\n    category: '',\n    ISBN: '',\n  })\n\n  const history = useHistory();\n\n  useEffect(() => {\n    getCategories()\n      .then(data => setCategories(data))\n  }, []);\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    setErrorVisible(true);\n    if (countError() === 0) {\n      addNewBook({ ...newBook });\n    }\n  }\n\n  const selectedCategoryId = (categoryId) => {\n    if (categoryId !== 0) {\n      getCategory(categoryId)\n        .then(data => setNewBook(({ ...newBook, category: data.name })));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {\n      emptyTitle: '',\n      emptyAuthor: '',\n      numberInAuthor: '',\n      noCategory: '',\n      emptyISBN: '',\n      lettersInISBN: '',\n      lengthISBN: '',\n    };\n\n    for (let name in newBook) {\n      switch (name) {\n        case 'title': newErrors.emptyTitle = newBook[name] === '' ? `The book title field cannot be blank` : '';\n          break;\n        case 'author':\n          newErrors.emptyAuthor = newBook[name] === '' ? `The book author field cannot be blank` : '';\n          newErrors.numberInAuthor = newBook[name].match(/\\d+/g) ? `The book author cannot contain numbers` : '';\n          break;\n        case 'category':\n          newErrors.noCategory = newBook[name] === '' ? `Select book category` : '';\n          break;\n        case 'ISBN':\n          newErrors.emptyISBN = newBook[name] === '' ? `The book ISBN field cannot be blank` : '';\n          newErrors.lettersInISBN = newBook[name].match(/[a-zA-Z]/g) ? `The book ISBN cannot contain letters` : '';\n          newErrors.lengthISBN = newBook[name].length === 13 ? '' : `The book ISBN field must contain 13 digits`;\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    return newErrors;\n  }\n\n  const errors = useMemo(validateForm, [newBook]);\n\n  const handleChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n    setNewBook((current) => ({ ...current, [name]: value }));\n  }\n\n  const countError = () => {\n    let count = 0;\n    for (const key in errors) {\n      if (errors[key].length > 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n\n  const addNewBook = ({ title, author, category, ISBN: isbn }) => {\n    const createBook = {\n      title,\n      author,\n      category,\n      isbn,\n    };\n\n    addBook(createBook);\n    redirect();\n  };\n\n  const redirect = () => history.replace('/')\n\n  return (\n    <div className=\"AddBook\">\n      <form\n        className=\"AddBook__form \"\n        onSubmit={onSubmit}\n      >\n        <input\n          className=\"input is-small field is-grouped-centered\"\n          name=\"title\"\n          type=\"text\"\n          placeholder=\"Title of book\"\n          value={newBook.title}\n          onChange={handleChange}\n        />\n        <input\n          className=\"input is-small field\"\n          name=\"author\"\n          type=\"text\"\n          placeholder=\"Author of book\"\n          value={newBook.author}\n          onChange={handleChange}\n        />\n        <select\n          name=\"category\"\n          id=\"category\"\n          className=\"AddBook__select select is-small field\"\n          onChange={event => selectedCategoryId(+event.target.value)}\n\n        >\n          <option\n            value=\"0\"\n            hidden\n            selected\n          >\n            Select category of book\n          </option>\n          {categoties.map(category => (\n            <option\n              value={category.id}\n              key={category.id}\n            >\n              {category.name}\n            </option>\n          ))}\n        </select>\n\n        <input\n          className=\"input is-small field\"\n          name=\"ISBN\"\n          type=\"text\"\n          placeholder=\"ISBN of book\"\n          value={newBook.ISBN}\n          onChange={handleChange}\n        />\n\n        <button\n          type=\"submit\"\n          className=\"AddBook__button button\"\n        >\n          Add book\n        </button>\n      </form>\n      <div className=\"AddBook__errors errors\">\n        {errorVisible && <ErrorsPlace errors={errors} />}\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport 'bulma';\nimport './EditBook.scss';\n\nimport { getCategories, getCategory } from '../api/category'\nimport { updateCurrentBook, getBooks } from '../api/books'\nimport { ErrorsPlace } from '../ErrorsPlace'\n\nexport const EditBook = () => {\n  const location = useLocation();\n  const { book } = location.state;\n  const [categoties, setCategories] = useState([]);\n  const [errorVisible, setErrorVisible] = useState(false)\n  const [editedBook, setEditedBook] = useState({\n    title: book.title,\n    author: book.author,\n    category: book.category,\n    isbn: book.isbn,\n  })\n\n  const history = useHistory();\n\n  useEffect(() => {\n    getCategories()\n      .then(data => setCategories(data))\n  }, []);\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    setErrorVisible(true);\n\n    if (countError() === 0) {\n      saveBook(editedBook);\n    }\n  }\n\n  const saveBook = (editedBook) => {\n\n    updateBook({ ...book, ...editedBook });\n    redirect();\n  };\n\n  const updateBook = (updatedBook) => {\n    updateCurrentBook(updatedBook);\n  }\n\n  const validateForm = () => {\n    const newErrors = {\n      emptyTitle: '',\n      emptyAuthor: '',\n      numberInAuthor: '',\n      noCategory: '',\n      emptyISBN: '',\n      lettersInISBN: '',\n      lengthISBN: '',\n    };\n\n    for (let name in editedBook) {\n      switch (name) {\n        case 'title': newErrors.emptyTitle = editedBook[name] === '' ? `The book title field cannot be blank` : '';\n          break;\n        case 'author':\n          newErrors.emptyAuthor = editedBook[name] === '' ? `The book author field cannot be blank` : '';\n          newErrors.numberInAuthor = editedBook[name].match(/\\d+/g) ? `The book author cannot contain numbers` : '';\n          break;\n        case 'category':\n          newErrors.noCategory = editedBook[name] === '' ? `Select book category` : '';\n          break;\n        case 'isbn':\n          newErrors.emptyISBN = editedBook[name] === '' ? `The book ISBN field cannot be blank` : '';\n          newErrors.lettersInISBN = editedBook[name].match(/[a-zA-Z]/g) ? `The book ISBN cannot contain letters` : '';\n          newErrors.lengthISBN = editedBook[name].length === 13 ? '' : `The book ISBN field must contain 13 digits`;\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    return newErrors;\n  }\n\n  const errors = useMemo(validateForm, [editedBook]);\n\n  const handleChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n    setEditedBook((current) => ({ ...current, [name]: value }));\n  }\n\n  const countError = () => {\n    let count = 0;\n    for (const key in errors) {\n      if (errors[key].length > 0) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n\n\n  const redirect = () => history.replace('/')\n\n  return (\n    <div className=\"AddBook\">\n      <form\n        className=\"AddBook__form \"\n        onSubmit={onSubmit}\n      >\n        <input\n          className=\"input is-small field is-grouped-centered\"\n          name=\"title\"\n          type=\"text\"\n          placeholder=\"Title of book\"\n          value={editedBook.title}\n          onChange={handleChange}\n        />\n        <input\n          className=\"input is-small field\"\n          name=\"author\"\n          type=\"text\"\n          placeholder=\"Author of book\"\n          value={editedBook.author}\n          onChange={handleChange}\n        />\n        <select\n          name=\"category\"\n          id=\"category\"\n          className=\"AddBook__select select is-small field\"\n          onChange={handleChange}\n          value={editedBook.category}\n\n        >\n          <option\n            value=\"0\"\n            hidden\n            selected\n          >\n            Select category of book\n          </option>\n          {categoties.map(category => (\n            <option\n              value={category.name}\n              key={category.id}\n            >\n              {category.name}\n            </option>\n          ))}\n        </select>\n\n        <input\n          className=\"input is-small field\"\n          name=\"isbn\"\n          type=\"text\"\n          placeholder=\"ISBN of book\"\n          value={editedBook.isbn}\n          onChange={handleChange}\n        />\n\n        <button\n          type=\"submit\"\n          className=\"AddBook__button button\"\n        >\n          Save\n        </button>\n      </form>\n      <div className=\"AddBook__errors errors\">\n        {errorVisible && <ErrorsPlace errors={errors} />}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\n\nimport { Header } from './Header';\nimport { Dashboard } from './Dashboard';\nimport { AddBook } from './AddBook';\nimport { EditBook } from './EditBook';\nimport './App.scss';\n\nconst App = () => (\n  <>\n    <Header />\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\">\n          <Dashboard />\n        </Route>\n        <Route path=\"/addbook\" component={AddBook}/>\n        <Route path=\"/editbook\" component={EditBook}/>\n        \n        <Redirect path=\"/home\" to=\"/\" />\n      </Switch>\n\n    </div>\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}